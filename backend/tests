{
    "title": "Implement authentication",
    "description": "Use JWT for authentication",
    "due_date": "2024-10-10 10:00:00",
    "status": "Pending",
    "assigned_user_id": 2
}
{
    "title": "Implement authenticatio2n",
    "description": "Use JWT for authentication2",
    "due_date": "2024-10-10 10:00:00",
    "status": "Pending",
    "assigned_user_id": 2
}
{
    "title": "Implement authentication3",
    "description": "Use JWT for authentication3",
    "due_date": "2024-10-10 10:00:00",
    "status": "Pending",
    "assigned_user_id": 2
}
{
    "title": "Implement authentication4",
    "description": "Use JWT for authentication4",
    "due_date": "2024-10-10 10:00:00",
    "status": "Pending",
    "assigned_user_id": 2
}
{
    "title": "Implement authentication5",
    "description": "Use JWT for authentication5",
    "due_date": "2024-10-10 10:00:00",
    "status": "Pending",
    "assigned_user_id": 2
}
import React, { useEffect, useState } from "react";
import axios from "axios";
import {
  Container,
  Typography,
  Box,
  Card,
  CardContent,
  Button,
  IconButton,
  TextField,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  MenuItem,
} from "@mui/material";
import EditIcon from "@mui/icons-material/Edit";
import { green, red, orange } from "@mui/material/colors"; // Colors for task statuses

const Tasks = () => {
  const [taskLists, setTaskLists] = useState([]);
  const [editTaskListOpen, setEditTaskListOpen] = useState(false);
  const [editTaskOpen, setEditTaskOpen] = useState(false);
  const [currentTaskList, setCurrentTaskList] = useState({});
  const [currentTask, setCurrentTask] = useState({});
  const [currentUser, setCurrentUser] = useState(null); // To hold current logged-in user info
  const token = localStorage.getItem("token");

  useEffect(() => {
    const fetchTasks = async () => {
      try {
        const taskRes = await axios.get("http://127.0.0.1:5000/my_task_lists", {
          headers: { Authorization: `Bearer ${token}` },
        });
        setTaskLists(taskRes.data);
        
        const userRes = await axios.get("http://127.0.0.1:5000/current_user", {
          headers: { Authorization: `Bearer ${token}` },
        });
        setCurrentUser(userRes.data);
      } catch (error) {
        console.log("Error fetching tasks or user info", error);
      }
    };
    fetchTasks();
  }, [token]);

  const handleLogout = () => {
    localStorage.removeItem("token");
    window.location.href = "/"; // Redirect to login page
  };

  const handleEditTaskListOpen = (taskList) => {
    setCurrentTaskList({
      id: taskList.id
    });
    setEditTaskListOpen(true);
  };

  const handleEditTaskOpen = (task) => {
    setCurrentTask({
      id: task.id, 
      title: task.title,
      description: task.description,
      due_date: task.due_date,
      status: task.status,
    });
    setEditTaskOpen(true);
  };

  const handleTaskListUpdate = async () => {
    try {
      
      await axios.put(
        `http://127.0.0.1:5000/task_lists/${currentTaskList.id}`,
        { name: currentTaskList.name },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setEditTaskListOpen(false);
      console.log(currentTaskList);
      // Re-fetch task lists to reflect updates
      const res = await axios.get("http://127.0.0.1:5000/my_task_lists", {
        headers: { Authorization: `Bearer ${token}` },
      });
      setTaskLists(res.data);
    } catch (error) {
      console.log("Error updating task list", error);
    }
  };

  const handleTaskUpdate = async () => {
    const dueDate = new Date(currentTask.due_date);
    const formattedDueDate = dueDate
      .toISOString()
      .slice(0, 16)
      .replace("T", " ");
    try {
      await axios.put(
        `http://127.0.0.1:5000/tasks/${currentTask.id}`,
        {
          id: currentTask.id,
          title: currentTask.title,
          description: currentTask.description,
          due_date: formattedDueDate,
          status: currentTask.status,
        },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setEditTaskOpen(false);
      // Re-fetch task lists to reflect updates
      const res = await axios.get("http://127.0.0.1:5000/my_task_lists", {
        headers: { Authorization: `Bearer ${token}` },
      });
      setTaskLists(res.data);
    } catch (error) {
      console.log("Error updating task", error);
    }
  };

  // Determine if the user can edit the task
  const canEditTask = (taskListOwnerId, taskStatus) => {
    if (!currentUser) return false;
    if (taskStatus === "Completed") return false; // Completed tasks cannot be edited
    return currentUser.role === "admin" || currentUser.id === taskListOwnerId;
  };

  return (
    <Container maxWidth="md" sx={{ mt: 8 }}>
      <Box
        sx={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
        }}
      >
        <Typography variant="h4">Your Task Lists</Typography>
        <Button onClick={handleLogout} variant="contained" color="secondary">
          Logout
        </Button>
      </Box>

      {taskLists && taskLists.length > 0 ? (
        taskLists.map((taskList) => (
          <Box key={taskList.task_list_id} sx={{ mt: 4 }}>
            <Typography variant="h5">
              {taskList.task_list_name || "Unnamed Task List"}
            </Typography>
            <IconButton
              onClick={() => handleEditTaskListOpen(taskList)}
              disabled={canEditTask(taskList.owner_id)}
            >
              <EditIcon />
            </IconButton>
            {taskList.tasks && taskList.tasks.length > 0 ? (
              taskList.tasks.map((task) => (
                <Card
                  key={task.id}
                  sx={{
                    mt: 2,
                    backgroundColor:
                      task.status === "Completed"
                        ? green[200]
                        : task.status === "In Progress"
                        ? orange[200]
                        : red[200],
                  }}
                >
                  <CardContent>
                    <Typography variant="h6">{task.title}</Typography>
                    <Typography>{task.description}</Typography>
                    <Typography>
                      Due Date: {new Date(task.due_date).toLocaleString()}
                    </Typography>
                    <Typography>Status: {task.status}</Typography>
                    <IconButton
                      onClick={() => handleEditTaskOpen(task)}
                      disabled={!canEditTask(task.owner_id, task.status)}
                    >
                      <EditIcon />
                    </IconButton>
                  </CardContent>
                </Card>
              ))
            ) : (
              <Typography>No tasks found</Typography>
            )}
          </Box>
        ))
      ) : (
        <Typography>No task lists available</Typography>
      )}

      {/* Edit Task List Dialog */}
      <Dialog
        open={editTaskListOpen}
        onClose={() => setEditTaskListOpen(false)}
      >
        <DialogTitle>Edit Task List</DialogTitle>
        <DialogContent>
          <TextField
            label="Task List Name"
            value={currentTaskList.name || ""}
            onChange={(e) =>
              setCurrentTaskList({ ...currentTaskList, name: e.target.value })
            }
            fullWidth
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setEditTaskListOpen(false)}>Cancel</Button>
          <Button onClick={handleTaskListUpdate}>Save</Button>
        </DialogActions>
      </Dialog>

      {/* Edit Task Dialog */}
      <Dialog open={editTaskOpen} onClose={() => setEditTaskOpen(false)}>
        <DialogTitle>Edit Task</DialogTitle>
        <DialogContent>
          <TextField
            label="Task Title"
            value={currentTask.title || ""}
            onChange={(e) =>
              setCurrentTask({ ...currentTask, title: e.target.value })
            }
            fullWidth
          />
          <TextField
            label="Description"
            value={currentTask.description || ""}
            onChange={(e) =>
              setCurrentTask({ ...currentTask, description: e.target.value })
            }
            fullWidth
            sx={{ mt: 2 }}
          />
          <TextField
            label="Due Date"
            type="datetime-local"
            value={
              currentTask.due_date
                ? new Date(currentTask.due_date).toISOString().substring(0, 16) // Format to 'YYYY-MM-DDTHH:MM'
                : ""
            }
            onChange={(e) =>
              setCurrentTask({ ...currentTask, due_date: e.target.value })
            }
            fullWidth
            sx={{ mt: 2 }}
          />

          <TextField
            label="Status"
            select
            value={currentTask.status || ""}
            onChange={(e) =>
              setCurrentTask({ ...currentTask, status: e.target.value })
            }
            fullWidth
            sx={{ mt: 2 }}
          >
            <MenuItem value="Not Started">Not Started</MenuItem>
            <MenuItem value="In Progress">In Progress</MenuItem>
            <MenuItem value="Completed">Completed</MenuItem>
          </TextField>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setEditTaskOpen(false)}>Cancel</Button>
          <Button onClick={handleTaskUpdate}>Save</Button>
        </DialogActions>
      </Dialog>
    </Container>
  );
};

export default Tasks;
